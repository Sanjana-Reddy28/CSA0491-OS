#include <stdio.h>

struct Process {
    int process_id;    
    int arrival_time;   
    int burst_time;    
};

void executeFCFS(struct Process processes[], int n) {
    int total_waiting_time = 0;  
    int total_turnaround_time = 0;  

    int current_time = 0;  

    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
      
        int waiting_time = current_time - processes[i].arrival_time;

        if (waiting_time < 0) {
          
            waiting_time = 0;
        }

        int turnaround_time = waiting_time + processes[i].burst_time;

        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;

        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].arrival_time, processes[i].burst_time, waiting_time, turnaround_time);

        current_time += processes[i].burst_time;
    }

    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;  

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n]; 

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        processes[i].arrival_time = 0;  
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }
    executeFCFS(processes, n);

    return 0;
}
